generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  phone           String?
  address         String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  login           String?
  role            UserRole         @default(user)
  isAdmin         Boolean          @default(false)
  ktpFile         String?
  accounts        Account[]
  businessProfile BusinessProfile?
  expenses        Expense[]
  properties      Property[]
  propertyGroups  PropertyGroup[]
  sessions        Session[]
  transactions    Transaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Allowlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BusinessProfile {
  id                 String   @id @default(cuid())
  userId             String   @unique
  name               String
  type               String
  taxId              String?
  phoneNumber        String
  address            String
  businessLicense    String?
  taxDocument        String?
  propertyDocument   String?
  verificationStatus String   @default("PENDING")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PropertyGroup {
  id          String     @id @default(cuid())
  name        String
  description String     @default("")
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  properties  Property[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Property {
  id                  String               @id @default(cuid())
  name                String
  description         String               @default("")
  address             String
  location            String               @default("")
  facilities          String[]             @default([])
  images              String[]             @default([])
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  userId              String
  city                String?
  postalCode          String?
  province            String?
  customPaymentDays   Int[]                @default([])
  paymentFrequency    PaymentFrequency     @default(MONTHLY)
  propertyGroupId     String?
  dueDateOffset       Int                  @default(5)
  expenses            Expense[]
  maintenanceRequests MaintenanceRequest[]
  payments            Payment[]
  propertyGroup       PropertyGroup?       @relation(fields: [propertyGroupId], references: [id])
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  rooms               Room[]
  transactions        Transaction[]

  @@index([userId])
  @@index([propertyGroupId])
}

model Room {
  id                  String               @id @default(cuid())
  number              String
  size                Int
  amenities           String[]             @default([])
  price               Float
  propertyId          String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  floor               Int?
  status              RoomStatus           @default(AVAILABLE)
  type                RoomType             @default(STANDARD)
  maintenanceRequests MaintenanceRequest[]
  property            Property             @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenants             Tenant[]

  @@index([propertyId])
  @@index([status])
}

model Tenant {
  id              String           @id @default(cuid())
  name            String
  email           String
  phone           String
  ktpNumber       String?
  ktpFile         String?
  kkFile          String?
  references      String[]
  roomId          String
  startDate       DateTime?
  endDate         DateTime?
  status          TenantStatus     @default(ACTIVE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  contractFile    String?
  depositAmount   Float?
  rentAmount      Float?
  billings        Billing[]
  checkInItems    CheckInItem[]
  leases          Lease[]
  payments        Payment[]
  serviceRequests ServiceRequest[]
  room            Room             @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([status])
}

model CheckInItem {
  id        String   @id @default(cuid())
  tenantId  String
  itemName  String
  condition String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}

model ServiceRequest {
  id          String               @id @default(cuid())
  tenantId    String
  type        String
  description String
  status      ServiceRequestStatus @default(PENDING)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  resolvedAt  DateTime?
  tenant      Tenant               @relation(fields: [tenantId], references: [id])
}

model Payment {
  id                 String        @id @default(cuid())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  amount             Float
  type               PaymentType
  status             PaymentStatus @default(PENDING)
  method             PaymentMethod @default(MANUAL)
  dueDate            DateTime
  paidAt             DateTime?
  description        String?
  notes              String?
  proofOfPayment     String?
  isRefunded         Boolean       @default(false)
  stripePaymentId    String?
  stripeClientSecret String?
  stripeCustomerId   String?
  tenantId           String
  propertyId         String
  billingId          String?
  billingCycleEnd    DateTime?
  billingCycleStart  DateTime?
  billing            Billing?      @relation(fields: [billingId], references: [id])
  property           Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenant             Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([propertyId])
  @@index([status])
  @@index([dueDate])
  @@index([billingCycleStart])
  @@index([billingCycleEnd])
}

model Expense {
  id                String          @id @default(cuid())
  propertyId        String?
  category          ExpenseCategory
  amount            Float
  date              DateTime
  description       String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  receipt           String?
  userId            String
  isRecurring       Boolean         @default(false)
  lastProcessedDate DateTime?
  nextDueDate       DateTime?
  recurringInterval String?
  property          Property?       @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([propertyId])
  @@index([date])
  @@index([isRecurring])
}

model MaintenanceRequest {
  id          String              @id @default(cuid())
  title       String
  description String
  status      MaintenanceStatus   @default(PENDING)
  priority    MaintenancePriority @default(LOW)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  propertyId  String
  roomId      String
  property    Property            @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  room        Room                @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([roomId])
  @@index([status])
}

model Lease {
  id                String           @id @default(cuid())
  startDate         DateTime
  endDate           DateTime
  rentAmount        Float
  deposit           Float
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  tenantId          String
  billingCycleEnd   DateTime?
  billingCycleStart DateTime
  nextBillingDate   DateTime
  paymentFrequency  PaymentFrequency @default(MONTHLY)
  tenant            Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String            @id @default(cuid())
  userId      String
  propertyId  String
  amount      Float
  status      TransactionStatus @default(PENDING)
  contractUrl String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  property    Property          @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Billing {
  id          String        @id @default(cuid())
  title       String
  description String?
  amount      Float
  dueDate     DateTime
  status      BillingStatus @default(DRAFT)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  tenantId    String?
  type        PaymentType   @default(RENT)
  tenant      Tenant?       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  payments    Payment[]
}

enum UserRole {
  user
  admin
}

enum PaymentMethod {
  MANUAL
  STRIPE
  BANK_TRANSFER
  CASH
  OTHER
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
}

enum RoomType {
  STANDARD
  DELUXE
  SUITE
  STUDIO
  CUSTOM
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  BLACKLISTED
  PENDING
}

enum ServiceRequestStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CANCELLED
}

enum PaymentType {
  RENT
  DEPOSIT
  UTILITY
  MAINTENANCE
  OTHER
  CUSTOM
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  FAILED
  REFUNDED
  PARTIAL
}

enum ExpenseCategory {
  SALARY
  STAFF_BENEFITS
  STAFF_TRAINING
  ELECTRICITY
  WATER
  INTERNET
  GAS
  CLEANING
  REPAIRS
  GARDENING
  PEST_CONTROL
  OFFICE_SUPPLIES
  MARKETING
  INSURANCE
  TAX
  LICENSE_PERMIT
  SECURITY
  WASTE_MANAGEMENT
  RENOVATION
  FURNITURE
  EQUIPMENT
  EMERGENCY
  LEGAL
  CONSULTING
  MISC_NON_OPERATIONAL
  OTHER
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  SCHEDULED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BillingStatus {
  DRAFT
  SENT
  PAID
  PARTIALLY_PAID
  OVERDUE
  CANCELLED
}

enum PaymentFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  BIANNUALLY
  ANNUALLY
  CUSTOM
  BI_WEEKLY
  SEMI_ANNUAL
  ANNUAL
}
